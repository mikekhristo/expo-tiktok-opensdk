{"version":3,"file":"withTikTokOpenSDK.js","sourceRoot":"","sources":["../src/withTikTokOpenSDK.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigPlugin, createRunOncePlugin, withPlugins, withInfoPlist, withAndroidManifest, AndroidConfig } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } = AndroidConfig.Manifest;\nconst pkg = require('../../package.json');\n\ninterface TikTokOpenSDKPluginProps {\n  iosClientKey: string;\n  androidClientKey: string;\n  iosUniversalLink?: string;\n  scheme?: string;\n  redirectScheme?: string;\n}\n\nconst withTikTokOpenSDKAndroid: ConfigPlugin<TikTokOpenSDKPluginProps> = (config, props) => {\n  return withAndroidManifest(config, async (config) => {\n    const mainApplication = getMainApplicationOrThrow(config.modResults);\n\n    // Add TikTok SDK activities\n    if (!Array.isArray(mainApplication.activity)) {\n      mainApplication.activity = [];\n    }\n\n    const hasShareActivity = mainApplication.activity.some(\n      activity => activity.$?.['android:name'] === 'com.tiktok.open.sdk.share.ShareActivity'\n    );\n\n    if (!hasShareActivity) {\n      mainApplication.activity.push({\n        $: {\n          'android:name': 'com.tiktok.open.sdk.share.ShareActivity',\n          'android:exported': 'true',\n          'android:launchMode': 'singleTask'\n        }\n      });\n    }\n\n    // Add TikTok SDK metadata\n    if (!mainApplication['meta-data']) {\n      mainApplication['meta-data'] = [];\n    }\n\n    const appKeyMetadata = mainApplication['meta-data'].find(\n      item => item.$?.['android:name'] === 'com.bytedance.sdk.appKey'\n    );\n\n    if (!appKeyMetadata) {\n      addMetaDataItemToMainApplication(\n        mainApplication,\n        'com.bytedance.sdk.appKey',\n        props.androidClientKey\n      );\n    }\n\n    if (props.scheme) {\n      const schemeMetadata = mainApplication['meta-data'].find(\n        item => item.$?.['android:name'] === 'com.bytedance.sdk.scheme'\n      );\n\n      if (!schemeMetadata) {\n        addMetaDataItemToMainApplication(\n          mainApplication,\n          'com.bytedance.sdk.scheme',\n          props.scheme\n        );\n      }\n    }\n\n    return config;\n  });\n};\n\nconst withTikTokOpenSDKIOS: ConfigPlugin<TikTokOpenSDKPluginProps> = (config, props) => {\n  return withInfoPlist(config, (config) => {\n    // Add URL schemes\n    if (!Array.isArray(config.modResults.CFBundleURLTypes)) {\n      config.modResults.CFBundleURLTypes = [];\n    }\n\n    const urlSchemes: string[] = [`tiktok${props.iosClientKey}`];\n    if (props.scheme) urlSchemes.push(props.scheme);\n    if (props.redirectScheme) urlSchemes.push(props.redirectScheme);\n\n    // Check if URL type already exists\n    const existingUrlType = config.modResults.CFBundleURLTypes.find(\n      urlType => urlType.CFBundleURLSchemes?.includes(`tiktok${props.iosClientKey}`)\n    );\n\n    if (!existingUrlType) {\n      config.modResults.CFBundleURLTypes.push({\n        CFBundleURLSchemes: urlSchemes\n      });\n    }\n\n    // Add LSApplicationQueriesSchemes\n    const querySchemes = [\n      'tiktokopensdk',\n      'tiktoksharesdk',\n      'snssdk1128',\n      'snssdk1233'\n    ];\n\n    if (!Array.isArray(config.modResults.LSApplicationQueriesSchemes)) {\n      config.modResults.LSApplicationQueriesSchemes = [];\n    }\n\n    // Add only unique schemes\n    config.modResults.LSApplicationQueriesSchemes = [\n      ...new Set([\n        ...config.modResults.LSApplicationQueriesSchemes,\n        ...querySchemes\n      ])\n    ];\n\n    // Add Universal Links if provided\n    if (props.iosUniversalLink) {\n      const domains = props.iosUniversalLink.replace(/https?:\\/\\//, '').split('/')[0];\n      config.modResults.com_apple_developer_associated_domains = [\n        `applinks:${domains}`\n      ];\n    }\n\n    return config;\n  });\n};\n\nconst withTikTokOpenSDK: ConfigPlugin<TikTokOpenSDKPluginProps> = (config, props) => {\n  if (!props.iosClientKey && !props.androidClientKey) {\n    throw new Error(\n      'Missing required TikTok SDK configuration. Please provide at least one of: iosClientKey or androidClientKey'\n    );\n  }\n\n  return withPlugins(config, [\n    [withTikTokOpenSDKAndroid, props],\n    [withTikTokOpenSDKIOS, props]\n  ]);\n};\n\nexport default createRunOncePlugin(withTikTokOpenSDK, pkg.name, pkg.version);\n"]}